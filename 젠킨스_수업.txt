 개발 소스코드 : github

 서버
  - tomcat
  - jenkins
    1) github에 올라간 소스코드를 실행할 수 있도록 빌드(*.war)
    2) tomcat에 배포(war 자동 생성)

 연습 : localhost에서 tomcat과 jenkins 설치
  - jenkins에서 build를 하면 자동으로 tomcat에 배포(여기까지 연습 가능/)
  - github에 push되면 자동 배포(jenkins를 localhost에 설치하면 세팅할 수 없어서 현재 연습이 안 됨.)

-------------------------------------------

 JDK 설치
 - JDK 1.8
 - 환경변수 (제어판-시스템-고급시스템설정)
   1) JAVA_HOME  
   2) Path

-------------------------------------------

 Maven 설치
 - 다운로드링크  https://maven.apache.org/download.cgi
 - Binary zip archive	apache-maven-3.8.1-bin.zip
 - 적당한 자리에 압축 풀어 두기(아래는 예시)
   C:\Program Files\apache-maven-3.8.1
 - 환경변수 (제어판-시스템-고급시스템설정)
   1) MAVEN_HOME  C:\Program Files\apache-maven-3.8.1
   2) Path        %MAVEN_HOME%\bin

-------------------------------------------

 tomcat 매니저 설정
 - apache-tomcat-8.5.72\conf\tomcat-users.xml 열고 아래 태그 추가하기
 <role rolename="manager-gui" />
 <role rolename="manager-script" />
 <role rolename="manager-jmx" />
 <role rolename="manager-status" />
 <user username="tomcat-manager" password="1111" roles="manager-gui,manager-script,manager-jmx,manager-status" />

-------------------------------------------

 Spring MVC 프로젝트 생성

 JenkinsProject / com.koreait.jenkinsproject

 <properties>
	<java-version>1.8</java-version>
	<org.springframework-version>5.1.4.RELEASE</org.springframework-version>
	<org.aspectj-version>1.9.2</org.aspectj-version>
	<org.slf4j-version>1.7.25</org.slf4j-version>
	<maven-version>3.8.1</maven-version>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
 </properties>

 <plugin>
   <groupId>org.apache.maven.plugins</groupId>
   <artifactId>maven-compiler-plugin</artifactId>
   <version>${maven-version}</version>
   <configuration>
      <source>${java-version}</source>
      <target>${java-version}</target>
      <compilerArgument>-Xlint:all</compilerArgument>
      <showWarnings>true</showWarnings>
      <showDeprecation>true</showDeprecation>
   </configuration>
 </plugin>

-------------------------------------------

 github

  new Repository : JenkinsProject

-------------------------------------------

 git

  JenkinsProject 에서 우클릭 - git bash here

  사용자 확인
  git config user.name
  git config user.email

  사용자 변경
  git config --global user.name '사용자명'
  git config --global user.email '이메일'

  로컬 저장소로 등록
  git init

  변경된 파일 추적
  git add .

  변경 저장
  git commit -m 'JenkinsProject'

  원격 저장소 등록
  git remote add origin 'JenkinsProject 레파지토리 주소'
  git remote add origin 'https://github.com/koreaitlecture/JenkinsProject.git'

  내려 받기
  git pull origin main --allow-unrelated-histories
  VIM 편집창으로 진입하면 ESC 누르고 :wq 입력하고 엔터 눌러서 빠져 나오기

  올리기
  git push origin main

-------------------------------------------

 Jenkins 설치

  - 다운로드 링크 : https://www.jenkins.io/download/

  - LTS 버전 중 Generic Java package(.war) 다운로드

  - jenkins.war 파일을 tomcat에 배포
    apache-tomcat-8.5.72\webapps 디렉터리에 jenkins.war 복붙

  - oracle과 포트번호 충돌 해결
    apache-tomcat-8.5.72\conf\server.xml 열고 <connector port="9090" 으로 수정

  - tomcat을 시작하고, jenkins 동작 확인
    apache-tomcat-8.5.72\bin\startup.bat 파일 실행 (리눅스 apache-tomcat-8.5.72\bin\startup.sh)
    크롬 열고 http://localhost:9090/jenkins 입력하면 젠킨스 실행되고, 초기 비밀번호 요구함.

  - 초기비밀번호 위치 : C:\Users\사용자계정\.jenkins\secrets\initialAdminPassword
    메모장으로 initialAdminPassword 파일 열고 젠킨스 실행 창에 비밀번호 입력

  - Customize Jenkins
    Install suggested plugins 선택해서 자동으로 플러그 인 설치

  - Admin User 등록
    알아서 등록하기 (아이디, 비번, 이름, 이메일)

  - Instance Configuration
    Jenkins URL   http://localhost:9090/jenkins

-------------------------------------------

 Jenkins 설정

 - 좌측 [Jenkins 관리] 메뉴

   1) System Configuration
      (1) 시스템 설정
          -enkins Location - Jenkins URL (http://127.0.0.1:9090/jenkins로 수정)  localhost는 젠킨스에서 사용할 수 없음.
      (2) Global Tool Configuration
          -Maven Configuration
           Default settings provider => Settings file in filesystem => File path : C:\Program Files\apache-maven-3.8.4\conf\settings.xml
           Default global settings provider => Global settings file on filesystem => File path : C:\Program Files\apache-maven-3.8.4\conf\settings.xml
          -Git
           Name => Git2.32
           Path to Git executable => C:\Program Files\Git\bin\git.exe
          -Maven
           Name => Maven3.8.1
           Install automatically 해제
           MAVEN_HOME => C:\Program Files\apache-maven-3.8.1
      (3) 플러그인 관리
          -Deploy to container 설치 후 시스템 재시작(빌드된 war 파일을 tomcat으로 다시 배포해주는 플러그인)
   2) Security
      (1) Manage Credentials
          - Stored scoped to Jenkins 아래 domain 열고 add credentials 선택해서 2개 등록(하나는 tomcat 접속용, 하나는 github 접속용)
            -- tomcat 접속용 (tomcat-users.xml에 추가한 태그를 등록하는 작업임.)
               Kind => Username with password
               Username => tomcat-manager
               Password => 1111
            -- github 접속용
               Kind => Username with password
               Username => 본인github아이디
               Password => 본인github비밀번호

-------------------------------------------

 Jenkins 프로젝트 생성

  - 좌측 [새로운 Item] 메뉴

  - Enter an item name => JenkinsProject (github에 올린 프로젝트명), 종류 Freestyle project

    1) 소스 코드 관리
       - Git
         -- Repository URL => https://github.com/koreaitlecture/JenkinsProject.git
         -- Credentials => github 접속용 Credentials 선택
         -- Branch Specifier (blank for 'any')
            main   브랜치이면  */main
            master 브랜치이면  */master
    2) Build
       - Invoke top-level Maven targets
         -- Maven Version => Maven3.8.1
         -- Goals => clean package
    3) 빌드 후 조치
       - Deploy war/ear to a container
         -- WAR/EAR files => **/*.war
         -- Context path => 비워둠.
         -- Containers
            --- Tomcat 8.x Remote
            --- Credentials => tomcat-manager/****** (tomcat 접속용 Credentials)
            --- Tomcat URL => http://localhost:9090 (https 안 됨)

-------------------------------------------

 Jenkins 프로젝트 빌드

  - 빌드
    좌측 Build Now 클릭하면 C:\Users\ITSC\.jenkins\jobs\JenkinsProject\workspace\target\jenkinsproject-1.0.0.war 생기는데
    빌드 후 조치로 이것을 tomcat container 로 옮기라고 설정했으므로,
    최종적으로 apache-tomcat-8.5.72\webapp\jenkinsproject-1.0.0.war 생성됨.

    pom.xml의 아래 부분에 의해서 war 파일명이 결정됨.
      <artifactId>jenkinsproject</artifactId>
      <packaging>war</packaging>
      <version>1.0.0-BUILD-SNAPSHOT</version>

  - 실행
    크롬 열고 http://localhost:9090/jenkinsproject-1.0.0 입력하면 실행됨. (war 파일명으로 실행)
    작업하고 있는 프로젝트의 컨텍스트 패스가 jenkinsproject인 경우 war 파일이름을 jenkinsproject로 수정하고 실행해야 함.
    이게 싫으면
    pom.xml을 열고, 아래 태그를 이용해서 생성되는 war 파일명을 context path와 같은 artifactId로 수정해 둘 수 있음.
    <build>
        <finalName>${artifactId}</finalName>
    </build>

-------------------------------------------
